services:
  postgres:
    image: postgres:17.2
    container_name: postgres
    volumes:
      - ./.postgresql/:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=backend
      - POSTGRES_DB=backend
      - POSTGRES_PASSWORD=backendpass
      - POSTGRES_HOST_AUTH_METHOD=trust
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U backend"]
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
      - "5432:5432"
    networks:
      - internal

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/ready"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - internal

  grafana:
    image: grafana/grafana
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_ROOT_URL=http://grafana.marc.trapuce.tech
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    depends_on:
      prometheus:
        condition: service_started
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - internal

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/misc/ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - internal

  keycloak:
    image: quay.io/keycloak/keycloak:22.0.3
    container_name: keycloak
    environment:
      - KEYCLOAK_ADMIN=admin
      - KC_HOSTNAME=keycloak.marc.trapuce.tech 
      - KC_HOSTNAME_STRICT=false
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KEYCLOAK_IMPORT=/opt/keycloak/data/import/marc-realm.json
    volumes:
      - ./keycloak/import/:/opt/keycloak/data/import/
    command:
      - start-dev
      - --import-realm
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - internal

  minio:
    image: "minio/minio:latest"
    container_name: minio
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=password
    volumes:
      - minio:/data/minio
    command: minio server /data/minio --console-address ':8900'
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - internal

  minio-init:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: [ "/bin/sh", "-c", "
      mc alias set myminio http://minio:9000 minio password;
      mc ls myminio/trybucket || mc mb myminio/trybucket; "]
    networks:
      - internal

  nginx:
    image: nginx:latest
    container_name: mon_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx-prod.conf:/etc/nginx/nginx.conf
      - /var/run/docker.sock:/tmp/docker.sock
    restart: always
    depends_on:
      pgadmin:
        condition: service_healthy
      grafana:
        condition: service_healthy
      backend:
        condition: service_healthy
      front:
        condition: service_healthy
    networks:
      - internal

  front: 
    container_name: front
    build:
      context: ../web/
      dockerfile: front.dockerfile
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - internal

  backend:
    build:
      context: ../backend
      dockerfile: ./backend.dockerfile
    container_name: backend
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_started
      minio-init:
        condition: service_completed_successfully
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/backend
      - SPRING_DATASOURCE_USERNAME=backend
      - SPRING_DATASOURCE_PASSWORD=backendpass
      - SERVER_PORT=8082
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal
   

volumes:
  pgadmin_data:
  keycloak_data:
    driver: local
  grafana_data:
    driver: local
  minio:
    driver: local

networks:
  internal:
    driver: bridge
