version: '3.8'

services:
  postgres:
    image: postgres:17.2
    container_name: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=backend
      - POSTGRES_DB=backend
      - POSTGRES_PASSWORD=backendpass
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U backend"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - internal

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - internal

  grafana:
    image: grafana/grafana
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      prometheus:
        condition: service_started
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - internal

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - internal

  keycloak:
    image: quay.io/keycloak/keycloak:22.0.3
    container_name: keycloak
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_HOSTNAME_STRICT=false
    command:
      - start-dev
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - internal

  minio:
    image: "minio/minio:latest"
    container_name: minio
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=password
    volumes:
      - minio_data:/data
    command: minio server /data --console-address ':8900'
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - internal

  minio-init:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: [ "/bin/sh", "-c", "
      sleep 10;
      mc alias set myminio http://minio:9000 minio password;
      mc ls myminio/trybucket || mc mb myminio/trybucket; 
      exit 0;"]
    networks:
      - internal

  nginx:
    image: nginx:alpine
    container_name: nginx_prod
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx-prod.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend
      - keycloak
    networks:
      - internal

  front:
    container_name: front
    build:
      context: ../web/
      dockerfile: front.dockerfile
    networks:
      - internal

  backend:
    build:
      context: ../backend
      dockerfile: ./backend.dockerfile
    container_name: backend_prod
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/backend
      - SPRING_DATASOURCE_USERNAME=backend
      - SPRING_DATASOURCE_PASSWORD=backendpass
      - MINIO_ENDPOINT=http://minio:9000
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/api/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - internal

volumes:
  postgres_data:
  pgadmin_data:
  grafana_data:
  minio_data:

networks:
  internal:
    driver: bridge